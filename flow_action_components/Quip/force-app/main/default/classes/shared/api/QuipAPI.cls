public class QuipAPI implements IQuipAPI {
    
    private static final String QUIP_URL = 'quip';

    private String apiKey;

    private Quip_Access_Token__mdt accessToken;

    private Boolean allowEmptyToken;

    public QuipAPI() {
        this(false);
    }

    public QuipApi(Boolean allowEmptyToken) {
        this.allowEmptyToken = allowEmptyToken;
    }

    private static final Pattern idPattern = Pattern.compile('^\\w{10,15}$');

    public Boolean likeId(String id) {
        if (String.isBlank(id)) {
            return false;
        }
        Matcher idMatcher = idPattern.matcher(id);
        return idMatcher.find();
    }

    public CurrentUserResponse getCurrentUser() {   
        String url = 'callout:' + QUIP_URL + '/users/current';
        HttpRequest req = newRequest(url);
        Http http = new Http();
        HTTPResponse res = http.send(req);
        Integer statusCode = res.getStatusCode();
        System.debug('Response status code: ' + String.valueOf(statusCode));
        return CurrentUserResponse.parse(res.getBody());
    }

    public ThreadResponse getThread(String id) {
        String url = 'callout:' + QUIP_URL + '/threads/' + EncodingUtil.urlEncode(id, 'UTF-8');
        HttpRequest req = newRequest(url);
        Http http = new Http();
        HTTPResponse res = http.send(req);
        Integer statusCode = res.getStatusCode();
        System.debug('Response status code: ' + String.valueOf(statusCode));
        if (statusCode == 404) {
            ThreadResponse result = new ThreadResponse();
            result.error = 'application_error';
            result.error_code = 404;
            result.error_description = 'Invalid thread ID: ' + id;
            return result;
        }
        return ThreadResponse.parse(res.getBody());
    }

    public ThreadListResponse getThreadList(List<String> id) {
        List<String> idList = new List<String>();
        for (String rawId: id) {
            idList.add(EncodingUtil.urlEncode(rawId, 'UTF-8'));
        }
        Integer batchSize = getBatchSize();
        List<List<String>> batches = new List<List<String>>();
        if (batchSize <= 0 || idList.size() <= batchSize) {
            batches.add(idList);
        } else {
            List<String> currentBatch = new List<String>();
            for (Integer i = 0; i < idList.size(); i++) {
                if (currentBatch.size() < batchSize) {
                    currentBatch.add(idList[i]);
                } else {
                    batches.add(currentBatch);
                    currentBatch = new List<String>();
                }
            }
            if (currentBatch.size() > 0) {
                batches.add(currentBatch);
            }
        }
        List<ThreadListResponse> responses = new List<ThreadListResponse>();
        for (List<String> batch : batches) {
            String url = 'callout:' + QUIP_URL + '/threads/?ids=' + String.join(batch, ',');
            HttpRequest req = newRequest(url);
            Http http = new Http();
            HTTPResponse res = http.send(req);
            Integer statusCode = res.getStatusCode();
            System.debug('Response status code: ' + String.valueOf(statusCode));
            ThreadListResponse response = ThreadListResponse.parse(res.getBody());
            responses.add(response);
        }
        if (responses.size() == 1) {
            return responses[0];
        }
        ThreadListResponse result = new ThreadListResponse();
        for (ThreadListResponse response : responses) {
            if (!response.isSuccess()) {
                return response;
            }
            result.threads.addAll(response.threads);
        }
        return result;
    }

    public FolderResponse getFolder(String id) {
        String url = 'callout:' + QUIP_URL + '/folders/' + EncodingUtil.urlEncode(id, 'UTF-8');
        HttpRequest req = newRequest(url);
        Http http = new Http();
        HTTPResponse res = http.send(req);
        Integer statusCode = res.getStatusCode();
        System.debug('Response status code: ' + String.valueOf(statusCode));
        return FolderResponse.parse(res.getBody());
    }

    public FolderListResponse getFolderList(List<String> id) {
        List<String> idList = new List<String>();
        for (String rawId: id) {
            idList.add(EncodingUtil.urlEncode(rawId, 'UTF-8'));
        }
        String url = 'callout:' + QUIP_URL + '/folders/?ids=' + String.join(idList, ',');
        HttpRequest req = newRequest(url);
        Http http = new Http();
        HTTPResponse res = http.send(req);
        Integer statusCode = res.getStatusCode();
        System.debug('Response status code: ' + String.valueOf(statusCode));
        return FolderListResponse.parse(res.getBody());
    }

    public ThreadResponse editDocument(String threadId, String content, String sectionId, SectionLocation location) {
        String url = 'callout:' + QUIP_URL + '/threads/edit-document'; 
        HttpRequest req = newRequest(url);
        req.setMethod('POST');
        req.setHeader('Content-Type', 'application/x-www-form-urlencoded');
        String body = 'thread_id=' + threadId 
                    + '&content=' + EncodingUtil.urlEncode(content, 'UTF-8')
                    + '&format=html&section_id=' + sectionId
                    + '&location=' + String.valueOf(location.valueOf());
        req.setBody(body);
        Http http = new Http();
        HTTPResponse res = http.send(req);
        Integer statusCode = res.getStatusCode();
        System.debug('Response status code: ' + String.valueOf(statusCode));
        return ThreadResponse.parse(res.getBody());
    }

    public ThreadResponse createDocument(String title, String content, String type, List<String> usersAndFolders) {
        String url = 'callout:' + QUIP_URL + '/threads/new-document';
        HttpRequest req = newRequest(url);
        req.setMethod('POST');
        req.setHeader('Content-Type', 'application/x-www-form-urlencoded');
        String body = 'title=' + EncodingUtil.urlEncode(title, 'UTF-8')
                    + '&content=' + EncodingUtil.urlEncode(content, 'UTF-8')
                    + '&format=html&type=' + type;
        if (usersAndFolders != null && usersAndFolders.size() > 0) {
            body += '&member_ids=' + String.join(usersAndFolders,',');
        }
        req.setBody(body);
        Http http = new Http();
        HTTPResponse res = http.send(req);
        Integer statusCode = res.getStatusCode();
        System.debug('Response status code: ' + String.valueOf(statusCode));
        return ThreadResponse.parse(res.getBody());
    }

    public FolderResponse createFolder(String title, String parentId) {
        String url = 'callout:' + QUIP_URL + '/folders/new';
        HttpRequest req = newRequest(url);
        req.setMethod('POST');
        req.setHeader('Content-Type', 'application/x-www-form-urlencoded');
        String body = 'title=' + EncodingUtil.urlEncode(title, 'UTF-8')
                    + '&parent_id=' + EncodingUtil.urlEncode(parentId, 'UTF-8');
        req.setBody(body);
        Http http = new Http();
        HTTPResponse res = http.send(req);
        Integer statusCode = res.getStatusCode();
        System.debug('Response status code: ' + String.valueOf(statusCode));
        return FolderResponse.parse(res.getBody());
    }

    public Response addMembers(String threadId, List<String> usersAndFolders) {
        if (usersAndFolders == null || usersAndFolders.size() == 0) {
            return new Response();
        }
        String url = 'callout:' + QUIP_URL + '/threads/add-members';
        HttpRequest req = newRequest(url);
        req.setMethod('POST');
        req.setHeader('Content-Type', 'application/x-www-form-urlencoded');
        String body = 'thread_id=' + EncodingUtil.urlEncode(threadId, 'UTF-8')
                    + '&member_ids=' + String.join(usersAndFolders,',');
        req.setBody(body);
        Http http = new Http();
        HTTPResponse res = http.send(req);
        Integer statusCode = res.getStatusCode();
        System.debug('Response status code: ' + String.valueOf(statusCode));
        return ThreadResponse.parse(res.getBody());
    }

    public Response removeMembers(String threadId, List<String> usersAndFolders) {
        if (usersAndFolders == null || usersAndFolders.size() == 0) {
            return new Response();
        }
        String url = 'callout:' + QUIP_URL + '/threads/remove-members';
        HttpRequest req = newRequest(url);
        req.setMethod('POST');
        req.setHeader('Content-Type', 'application/x-www-form-urlencoded');
        String body = 'thread_id=' + EncodingUtil.urlEncode(threadId, 'UTF-8')
                    + '&member_ids=' + String.join(usersAndFolders,',');
        req.setBody(body);
        Http http = new Http();
        HTTPResponse res = http.send(req);
        Integer statusCode = res.getStatusCode();
        System.debug('Response status code: ' + String.valueOf(statusCode));
        return ThreadResponse.parse(res.getBody());
    }

    public Response editFolder(String folderId, String newName) {        
        String url = 'callout:' + QUIP_URL + '/folders/update';
        HttpRequest req = newRequest(url);
        req.setMethod('POST');
        req.setHeader('Content-Type', 'application/x-www-form-urlencoded');
        String body = 'folder_id=' + EncodingUtil.urlEncode(folderId, 'UTF-8')
                    + '&title=' + EncodingUtil.urlEncode(newName, 'UTF-8');
        req.setBody(body);
        Http http = new Http();
        HTTPResponse res = http.send(req);
        Integer statusCode = res.getStatusCode();
        System.debug('Response status code: ' + String.valueOf(statusCode));
        return FolderResponse.parse(res.getBody());
    }

    public UserListResponse getUsers(List<String> idsOrEmails) {
        if (idsOrEmails == null || idsOrEmails.size() == 0) {
            return new UserListResponse();
        }
        String url = 'callout:' + QUIP_URL + '/users/?ids=' + String.join(idsOrEmails, ',');
        HttpRequest req = newRequest(url);
        Http http = new Http();
        HTTPResponse res = http.send(req);
        Integer statusCode = res.getStatusCode();
        System.debug('Response status code: ' + String.valueOf(statusCode));
        return UserListResponse.parse(res.getBody());
    }

    public ThreadSearchResponse searchThreads(String name) {
        String url = 'callout:' + QUIP_URL + '/threads/search?only_match_titles=true&query=' + EncodingUtil.urlEncode(name, 'UTF-8');
        HttpRequest req = newRequest(url);
        Http http = new Http();
        HTTPResponse res = http.send(req);
        Integer statusCode = res.getStatusCode();
        System.debug('Response status code: ' + String.valueOf(statusCode));
        String body = res.getBody();
        if (body.startsWith('[')) {
            List<ThreadSearchResponse.SearchResult> threads = (List<ThreadSearchResponse.SearchResult>)System.JSON.deserialize(body, List<ThreadSearchResponse.SearchResult>.class);
            ThreadSearchResponse result = new ThreadSearchResponse();
            result.threads = threads;
            return result;
        }
        return (ThreadSearchResponse)System.JSON.deserialize(body, ThreadSearchResponse.class);
    }

    private HttpRequest newRequest(String url) {
        HttpRequest req = new HttpRequest();
        req.setEndpoint(url);
        req.setMethod('GET');        
        req.setHeader('Accept', 'application/json, text/json');
        req.setHeader('Content-Type', 'application/json');
        req.setHeader('Authorization', 'Bearer ' + getApiKey());
        req.setTimeout(20 * 1000);
        return req;
    }

    private static final String TOKEN_LABEL = 'Token';

    private static final String TOKEN_PLACEHOLDER = 'Replace with Valid Token';

    private String getApiKey() { 
        if (allowEmptyToken) {
            return '';
        }
        if (accessToken == null) {
            List<Quip_Access_Token__mdt> tokens = [SELECT Token__c,Max_Batch_Size__c FROM Quip_Access_Token__mdt WHERE Label = 'Token'];
            if (tokens.size() == 0) {
                throw new QuipException('The item labeled "' + TOKEN_LABEL + '" of "Quip Access Token" custom metadata type was not found');
            }
            
            if (tokens[0].Token__c == TOKEN_PLACEHOLDER) {
                throw new QuipException('You should set your Quip API key on the item of "Quip Access Token" type labeled "' + TOKEN_LABEL + '"');
            }
            accessToken = tokens[0];            
        }
        return accessToken.Token__c;
    }

    private Integer getBatchSize() {
        if (allowEmptyToken) {
            return 0;
        }
        if (accessToken == null) {
            List<Quip_Access_Token__mdt> tokens = [SELECT Token__c,Max_Batch_Size__c FROM Quip_Access_Token__mdt WHERE Label = 'Token'];
            if (tokens.size() == 0) {
                throw new QuipException('The item labeled "' + TOKEN_LABEL + '" of "Quip Access Token" custom metadata type was not found');
            }
           accessToken = tokens[0];            
        }
        return accessToken.Max_Batch_Size__c == null ? 0 : accessToken.Max_Batch_Size__c.intValue();
    }
}
